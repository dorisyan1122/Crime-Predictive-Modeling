---
title: "Predictive Model"
author: "Ziwen Lu, Xuyan Xiu, Doris Yan"
format: html
editor: visual
execute: 
  warning: false
embed-resources: true
---
```{r load packages, echo=FALSE}
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(vip)
```

# Data Cleaning

```{r}
attr(crime_all$viol, "format.stata") <- NULL
attr(crime_all$property, "format.stata") <- NULL

attr(crime_all$viol, "label") <- NULL
attr(crime_all$property, "label") <- NULL

crime_all <- crime_all[!is.na(crime_all$viol), ]
crime_all <- crime_all[!is.na(crime_all$property), ]

crime_all$log_viol <- log(crime_all$viol)
crime_all <- crime_all[crime_all$log_viol != -Inf, ]

crime_all$log_property <- log(crime_all$property)
crime_all <- crime_all[crime_all$log_property != -Inf, ]
```

# Spliting Data

```{r}
set.seed(904)
crime_split <- initial_split(crime_all, prop = 0.8)

crime_train <- training(crime_split)
crime_test <- testing(crime_split)
```

# Cross-validation

```{r}
set.seed(904)
crime_folds <- vfold_cv(data = crime_train, v = 5)
```

# Violent Crime
## Ridge Regression

### feature and target engineering

```{r} 
# recipe
ridge_rec <- recipe(log_viol ~ ., 
           data = crime_train) |>
    step_impute_median(all_numeric_predictors())|>
    update_role(county,
                year,
                property,
                new_role = "id") |>
  step_normalize(all_numeric_predictors())

ridge_rec_summary<-summary(ridge_rec)

# model
ridge_mod <- 
  linear_reg(penalty = tune(), 
             mixture = 0) |>
  set_mode(mode = "regression") |>
  set_engine(engine = "glmnet")  
  
ridge_grid <- 
  grid_regular(penalty(), 
               levels = 1)
  
ridge_wf <- 
  workflow() |>
  add_recipe(recipe = ridge_rec) |>
  add_model(spec = ridge_mod)
```

### choose the best model

```{r}
ridge_resamples <-
  ridge_wf |>
  tune_grid(
    resamples = crime_folds,
    grid = ridge_grid
  )

collect_metrics(ridge_resamples)
```

## Lasso

### feature and target engineering

```{r}
lasso_rec <-
    recipe(log_viol ~ ., 
           data = crime_train) |>
    step_impute_median(all_numeric_predictors())|>
    update_role(county,
                year,
                property,
                new_role = "id") |>
  step_normalize(all_numeric_predictors())

# check if feature engineering works to remove variables
lasso_summary<-summary(lasso_rec)

# create a model
lasso_mod <- 
  linear_reg(penalty = tune(), mixture = 1) |>
  set_mode(mode = "regression") |>
  set_engine(engine = "glmnet")  

lasso_grid <-
  tibble(penalty = 10^seq(-4, -1, length.out = 30))
 
lasso_wf <-
  workflow() |>
  add_recipe(recipe = lasso_rec) |>
  add_model(spec = lasso_mod)
```

### choose the best model

```{r}
set.seed(904)
lasso_resamples<- 
  lasso_wf|>
  tune_grid(
    resamples = crime_folds,
    grid = lasso_grid,
    )

lasso_resamples |>
  collect_metrics()
  
top_lasso_models <-
  lasso_resamples |>
  show_best() |>
  arrange(penalty) 

lasso_resamples|>
  select_best()

lasso_resamples|>
  autoplot()
```

## Random Forest

### feature and target engineering

```{r}
rf_rec <- 
  recipe(log_viol ~ ., 
         crime_train) |>
   step_impute_median(all_predictors())|>
   update_role(county, 
              year, 
              property,
              new_role = "id")

rf_mod <- 
  rand_forest(
  mtry = tune(),
  min_n = tune(),
  trees = 100
  ) |>
  set_mode(mode = "regression") |>
  set_engine(
    engine = "ranger", 
    importance = "impurity",
    num.threads = 4
  )

rf_wf <- workflow() |>
  add_recipe(rf_rec) |>
  add_model(rf_mod)

rf_grid <- grid_regular(
  mtry(range = c(1, 15)),
  min_n(range = c(1, 15)),
  levels = 5
)
```

### choose the best model

```{r}
set.seed(904)
rf_resamples <- tune_grid(
  rf_wf,
  resamples = crime_folds,
  grid = rf_grid
)

collect_metrics(rf_resamples)

show_best(rf_resamples, 
          metric = "rmse") 

select_best(rf_resamples)
autoplot(rf_resamples)
```

## Linear Regression

### feature and target engineering

```{r}
# build a linear regression recipe
lm_rec <-
  recipe(log_viol ~ ., 
         data = crime_train) |>
   step_impute_median(all_predictors())|>
   update_role(county, 
              year, 
              property,
              new_role = "id")

lm_mod <- linear_reg() |>
  set_mode(mode = "regression") |>
  set_engine(engine = "lm")

lm_wf <- workflow() |>
  add_recipe(lm_rec) |>
  add_model(lm_mod)
```

### choose the best model

```{r}
set.seed(904)
lm_resamples <- lm_wf |>
  fit_resamples(resamples = crime_folds)

lm_resamples |>
  collect_metrics()
```

